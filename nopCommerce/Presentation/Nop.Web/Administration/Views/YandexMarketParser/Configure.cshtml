@{
    // Layout = "";

    //Html.AddCssFileParts("~/Plugins/Misc.YandexMarketParser/Content/styles.css");   
    Html.EnableClientValidation(); 
}
@model Nop.Admin.Models.YandexMarket.YandexMarketParserModel
@using Nop.Admin.Models.YandexMarket

@using Nop.Web.Framework;

@using Nop.Core.Infrastructure;
@using Nop.Web.Framework.UI
@using Telerik.Web.Mvc.UI

@using (Html.BeginForm())
{
    @Html.Telerik().TabStrip().Name("googlebase-configure").Items(x =>
{
    x.Add().Text("Категории парсера").Content(TabCategory().ToHtmlString()).Selected(true);
    x.Add().Text("Парсер").Content(this.TabParser().ToHtmlString());
})   
}




@helper TabCategory()
{
    @* Add new Parser categories*@
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AddParserCategoryName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddParserCategoryName)
                @Html.ValidationMessageFor(model => model.AddParserCategoryName)
            </td>
            
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AddParserCategoryUrl):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddParserCategoryUrl)
                @Html.ValidationMessageFor(model => model.AddParserCategoryUrl)
            </td>
            
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AddShopCategoryId):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.AddShopCategoryId, Model.AvailableShopCategories)<br /> 
            </td>       
                 
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AddIsActive):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddIsActive)                
            </td>
        </tr>

        <tr>
            <td colspan="2">
                <input type="button" id="add" class="t-button" value="Добавить" />
            </td>
        </tr>
        
         <tr>
              <td colspan="2">
                    @Html.CheckBoxFor(model => model.IsSetActiveAllParserCategoties)
                    @Html.LabelFor(model => model.IsSetActiveAllParserCategoties)
             </td> 
        </tr>
       
    </table>
@*Filters*@
    <table class="adminContent">
        <tr>
            <td>
                @* ReSharper disable ConvertToLambdaExpression *@
                @{
                    var routeDictionaryForGrid = new RouteValueDictionary() { { "Namespaces", "Nop.Plugin.Misc.YandexMarketParser.Controllers" }, { "area", "" } };
                    const string controllerNameForGrid = "YandexMarketCategory";
                }
                @(Html.Telerik().Grid<YandexMarketCategoryModel>().Name("YandexMarketCategory-grid").DataKeys(keys => keys.Add(x => x.Id).RouteKey("Id")).Columns(columns =>
            {
                columns.Bound(x => x.Name).Width(200);
                columns.Bound(x => x.Url).Width(200);
                columns.Bound(x => x.ShopCategoryName).Width(200);
                columns.Bound(x => x.IsActive).Width(20);
                columns.Bound(x => x.AlreadyImportedProducts).Width(10);

                columns.Command(commands =>
                {
                    commands.Edit().Text("Редактировать");
                    commands.Delete().Text("Удалить");
                }).Width(180);

            })
            .Editable(x => { x.Mode(GridEditMode.InLine); })
            .Sortable()
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax()
                           .Select("ListCategory", controllerNameForGrid)
                           .Update("UpdateCategory", controllerNameForGrid)
                           .Delete("DeleteCategory", controllerNameForGrid);
            })
                      .Pageable(settings => settings.PageSize(150).Position(GridPagerPosition.Both)).EnableCustomBinding(true))
                @* ReSharper restore ConvertToLambdaExpression *@

            </td>
        </tr>
    </table>
        
    <script type="text/javascript">
        $(function () {
            
            $('#add').click(function () {
                $.ajax({
                    cache: false,
                    type: 'POST',
                    url: '@Url.Action("Add", "YandexMarketCategory")',
                    data: $(this.form).serialize(),
                    dataType: 'json',
                    success: function (data) {
                        var grid = $("#YandexMarketCategory-grid");// refresh grid
                        grid.data('tGrid').ajaxRequest();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to add record.');
                    }
                });
                return false;
            });
            
            $("#@Html.FieldIdFor(model => model.IsSetActiveAllParserCategoties)").on('click', function () {
                $.ajax({
                    cache: false,
                    type: 'POST',
                    url: '@Url.Action("SetActiveAllParserCategoties", "YandexMarketCategory")',
                    data: { isNotImportedOnly: $('#@Html.FieldIdFor(model => model.IsSetActiveAllParserCategoties)').prop("checked")},
                    dataType: 'json',
                    success: function (data) {
                        var grid = $("#YandexMarketCategory-grid");// refresh grid
                        grid.data('tGrid').ajaxRequest();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to SetActiveAllParserCategoties.');
                    }
                 });
                return true;
               
             });
        });
    </script>
        
} @*end TabCategory*@


@helper TabParser()
{    
                                           
    const string ProductGridName = "YandexMarketProduct-grid";                                        
    
    
    <table style="width: 100%;">
        
              @*Buttons*@
        <tr>
            <td colspan="2">
                <div>
                    @Html.LabelFor(model => model.ParseNotMoreThen) :
                    @Html.EditorFor(model => model.ParseNotMoreThen)
                </div>
                <div>
                    @Html.CheckBoxFor(model => model.IsTest)
                    @Html.LabelFor(model => model.IsTest)
                </div>
                <div>
                    @Html.CheckBoxFor(model => model.IsClearCategoryProductsBeforeParsing)
                    @Html.LabelFor(model => model.IsClearCategoryProductsBeforeParsing)
                </div>
               
                <img id="parsingIndicator" style="display: none" src="/administration/content/images/throbber-synchronizing.gif"><br />                 
                <input type="submit" id="Parse" class="t-button" value="Шаг 1.  Спарсить продукты со страниц и сохранить в категорию парсера (для активных категорий парсера)" /> <br /> 
                <input type="button" id="onlyNew" class="t-button" value="Шаг 2. Отобразить только новые спарсенные спецификации, которые еще не существуют в интернет-магазине (для активных категорий парсера)" /><br/>              
                <input type="button" id="btnApplyImport" class="t-button" value="Шаг 3. Импортнуть новые спецификации в интернет-магазин (для активных категорий парсера)" /> <br /> 
                <input type="submit" id="btnImportProductList" class="t-button" value="Шаг 4. Импортнуть новые товары в интернет-магазин  (для активных категорий парсера)" />
                <input type="button" id="btnApplyImportAll" class="t-button" value="Шаг 3 и 4. Импортнуть все" /> <br /> 

                





                <script type="text/javascript">
                    $(function () {
                        $('#onlyNew').click(function () {
                            $.ajax({
                                beforeSend: function () { $('#parsingIndicator').show(); },
                                complete: function () { $('#parsingIndicator').hide(); },
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("GetAllSpecs", "YandexMarketSpecImport")',
                                                                @*data: { parserCategoryId: $('#@Html.FieldIdFor(model => model.ParserCategoryId)').val() },*@
                                dataType: 'json',
                                success: function (data) {

                                    var place = $('.new-specs');
                                    place.html('');

                                    var i = 0;
                                    $.each(data, function () {

                                        var specLi = $('<li>').append(data[i].Name);
                                        var specOptUl = $('<ul>');

                                        specLi.append(specOptUl);
                                        place.append(specLi);

                                        var k = 0;
                                        $.each(data[i].SpecificationAttributeOptions, function () {

                                            var curSpecOptData = data[i].SpecificationAttributeOptions[k];
                                            var specOptLi = $('<li>').append(curSpecOptData.Name);

                                            if (curSpecOptData.DisplayOrder == 777) {
                                                specOptLi.css('color', 'blue');
                                            } else {
                                                specOptLi.css('color', 'gray');
                                            }


                                            specOptUl.append(specOptLi);
                                            k++;
                                        });

                                        i++;
                                    });

                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.responseText);
                                }
                            });
                            return false;
                        });



                        $('#btnApplyImport').click(function () {
                            $.ajax({
                                beforeSend: function () { $('#parsingIndicator').show(); },
                                complete: function () { $('#parsingIndicator').hide(); },
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("ApplyImport", "YandexMarketSpecImport")',
                                                                @*data: { parserCategoryId: $('#@Html.FieldIdFor(model => model.ParserCategoryId)').val() },*@
                                dataType: 'text',
                                success: function (data) {
                                    alert(data);
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.responseText);
                                }
                            });
                            return false;
                        });
                    });
                </script>


                <script type="text/javascript">
                    $(function () {

                        $('#btnImportProductList').click(function () {
                            $.ajax({
                                beforeSend: function () { $('#parsingIndicator').show(); },
                                complete: function () { $('#parsingIndicator').hide(); },
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("ImportProductList", "YandexMarketProduct")',
                                                                @*data: {
                                    parserCategoryId: $('#@Html.FieldIdFor(model => model.ParserCategoryId)').val(),
                                    shopCategoryId: $('#@Html.FieldIdFor(model => model.ShopCategoryId)').val()
                                },*@
                                dataType: 'text',
                                success: function (data) {
                                    alert(data);
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.responseText);
                                }
                            });
                            return false;
                        });

                        $('#btnApplyImportAll').click(function () {
                            $.ajax({
                                beforeSend: function () { $('#parsingIndicator').show(); },
                                complete: function () { $('#parsingIndicator').hide(); },
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("ApplyImport", "YandexMarketSpecImport")',
                                                                @*data: { parserCategoryId: $('#@Html.FieldIdFor(model => model.ParserCategoryId)').val() },*@
                                dataType: 'text',
                                success: function (data) {
                                    
                                    $.ajax({
                                        beforeSend: function () { $('#parsingIndicator').show(); },
                                        complete: function () { $('#parsingIndicator').hide(); },
                                        cache: false,
                                        type: 'POST',
                                        url: '@Url.Action("ImportProductList", "YandexMarketProduct")',
                                                                @*data: { parserCategoryId: $('#@Html.FieldIdFor(model => model.ParserCategoryId)').val() },*@
                                        dataType: 'text',
                                        success: function (data) {
                                            alert(data);
                                        },
                                        error: function (xhr, ajaxOptions, thrownError) {
                                            alert(xhr.responseText);
                                        }
                                    });

                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.responseText);
                                }
                            });
                            return false;
                        });














                        $('#Parse').click(function () {
                            $.ajax({
                                beforeSend: function () { $('#parsingIndicator').show(); },
                                complete: function () { $('#parsingIndicator').hide(); },
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("Parse", "YandexMarketParser")',
                                data: $(this.form).serialize(),
                                dataType: 'json',
                                success: function (data) {
                                    var grid = $("#@ProductGridName");
                                    grid.data('tGrid').ajaxRequest();
                                    alert('Success');
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert(xhr.responseText);
                                }
                            });
                            return false;
                        });
                    });
                </script>

            </td>
        </tr>

        @*Filters*@
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ParserCategoryId):
                @Html.DropDownListFor(model => model.ParserCategoryId, Model.AvailableParserCategories)
                @Html.ValidationMessageFor(model => model.ParserCategoryId)

                <div>
                    @Html.CheckBoxFor(model => model.IsNotImportedOnly)
                    @Html.LabelFor(model => model.IsNotImportedOnly)
                </div> 
            </td>
            <td class="adminData">
                  
            </td>
            

        </tr>

        @*Parsed products table*@
        <tr>
            <td>
               
                @(Html.Telerik().Grid<YandexMarketProductModel>()
                      .Name(ProductGridName)
                      .ClientEvents(events => events.OnDataBinding("onDataBinding"))
                      .DataKeys(keys => keys.Add(x => x.Id).RouteKey("Id"))
                      .Columns(columns =>
                      {
                          columns.Bound(x => x.Articul).Width(70);

                          columns.Bound(x => x.Name).Width(200);

                          columns.Bound(x => x.FullDescription)
                              .ClientTemplate("<div class='parser-full-description'><#= FullDescription #></div>")
                              .Width(400);

                          columns.Bound(x => x.SpecificationsHtml)
                              .ClientTemplate("<div class='parser-specs'><#= SpecificationsHtml #></div>")
                                .Width(500);

                          columns.Bound(x => x.ImagesHtml)
                                .ClientTemplate("<div class='parser-images'><#= ImagesHtml #></div>");

                          columns.Bound(x => x.Url)
                              .ClientTemplate("<div class='parser-product-url'><#= Url #></div>")
                              .Width(100);

                          columns.Command(commands =>
                          {
                              commands.Edit().Text("Редактировать");
                              commands.Delete().Text("Удалить");
                          }).Width(180);

                      })
                      .Editable(x => { x.Mode(GridEditMode.InLine); })
                      .Sortable()
                      .DataBinding(dataBinding =>
                      {
                          const string controllerNameForProductGrid = "YandexMarketProduct";
                          dataBinding.Ajax()
                                     .Select("ListProduct", controllerNameForProductGrid)
                                     .Update("UpdateProduct", controllerNameForProductGrid)
                                     .Delete("DeleteProduct", controllerNameForProductGrid);
                      })
                      .Pageable(settings => settings.PageSize(15).Position(GridPagerPosition.Both))
                      .EnableCustomBinding(true))
                @* ReSharper restore ConvertToLambdaExpression *@


                <script type="text/javascript">

                    function onDataBinding(e) {
                        var searchModel = {
                            parserCategoryId: $('#@Html.FieldIdFor(model => model.ParserCategoryId)').val(),
                            isNotImportedOnly: $('#@Html.FieldIdFor(model => model.IsNotImportedOnly)').prop("checked")
                        };
                        e.data = searchModel;
                    }

                    $(function () {
                        
                        $("#@Html.FieldIdFor(model => model.ParserCategoryId)").change(function () {
                            var grid = $("#@ProductGridName");
                            grid.data('tGrid').ajaxRequest();
                        });
                        
                        $("#@Html.FieldIdFor(model => model.IsNotImportedOnly)").on('click', function () {
                            var grid = $("#@ProductGridName");
                             grid.data('tGrid').ajaxRequest();
                        });
                                               
                    });
                </script>

            </td>
        </tr>
        
        <tr>
            <td>
                <div class="new-specs" style="width: -moz-max-content;">
                    <ul></ul>
                </div>
            </td>
        </tr>

  
    </table>
}@*end TabParser*@

